{
  "address": "0x4f7A4dD386625cE863C86237b634D9a44c69dA44",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardSource",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsPerSecond",
          "type": "uint256"
        }
      ],
      "name": "RewardsPerSecondSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        }
      ],
      "name": "WeightAdjusted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_POOL_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_DISTRIBUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_SAVER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newWeight",
          "type": "uint256"
        }
      ],
      "name": "adjustWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IBasePool",
              "name": "poolContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            }
          ],
          "internalType": "struct LiquidityMiningManager.Pool[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract IBasePool",
          "name": "poolContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardSource",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "saveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x810099bb133944782674847320b762539463bb5a7662838ff4b7a54a94e3e1d7",
  "receipt": {
    "to": null,
    "from": "0xCAa58677fa6a5437B0eDD37659f94DdBEa575945",
    "contractAddress": "0x4f7A4dD386625cE863C86237b634D9a44c69dA44",
    "transactionIndex": 8,
    "gasUsed": "2017282",
    "logsBloom": "0x
    "blockHash": "0xc055077a591a6d5d55c9bf97f267a7139a5e80a826721ff7997bcbaff53efe14",
    "transactionHash": "0x810099bb133944782674847320b762539463bb5a7662838ff4b7a54a94e3e1d7",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 11533360,
        "transactionHash": "0x810099bb133944782674847320b762539463bb5a7662838ff4b7a54a94e3e1d7",
        "address": "0x4f7A4dD386625cE863C86237b634D9a44c69dA44",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000caa58677fa6a5437b0edd37659f94ddbea575945",
          "0x000000000000000000000000caa58677fa6a5437b0edd37659f94ddbea575945"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xc055077a591a6d5d55c9bf97f267a7139a5e80a826721ff7997bcbaff53efe14"
      }
    ],
    "blockNumber": 11533360,
    "cumulativeGasUsed": "3236186",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x23FF74Af1a1e8Ef4433d761943Eb164F927bA2e2",
    "0xCAa58677fa6a5437B0eDD37659f94DdBEa575945"
  ],
  "solcInputHash": "4dd4042dc1c15f899b33729ede82d124",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardSource\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardsPerSecondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"WeightAdjusted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_POOL_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_DISTRIBUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SAVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newWeight\",\"type\":\"uint256\"}],\"name\":\"adjustWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IBasePool\",\"name\":\"poolContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityMiningManager.Pool[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IBasePool\",\"name\":\"poolContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"saveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityMiningManager.sol\":\"LiquidityMiningManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/LiquidityMiningManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IBasePool.sol\\\";\\nimport \\\"./base/TokenSaver.sol\\\";\\n\\ncontract LiquidityMiningManager is TokenSaver {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant GOV_ROLE = keccak256(\\\"GOV_ROLE\\\");\\n    bytes32 public constant REWARD_DISTRIBUTOR_ROLE = keccak256(\\\"REWARD_DISTRIBUTOR_ROLE\\\");\\n    uint256 public MAX_POOL_COUNT = 10;\\n\\n    IERC20 immutable public reward;\\n    address immutable public rewardSource;\\n    uint256 public rewardPerSecond; //total reward amount per second\\n    uint256 public lastDistribution; //when rewards were last pushed\\n    uint256 public totalWeight;\\n\\n    mapping(address => bool) public poolAdded;\\n    Pool[] public pools;\\n\\n    struct Pool {\\n        IBasePool poolContract;\\n        uint256 weight;\\n    }\\n\\n    modifier onlyGov {\\n        require(hasRole(GOV_ROLE, _msgSender()), \\\"LiquidityMiningManager.onlyGov: permission denied\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardDistributor {\\n        require(hasRole(REWARD_DISTRIBUTOR_ROLE, _msgSender()), \\\"LiquidityMiningManager.onlyRewardDistributor: permission denied\\\");\\n        _;\\n    }\\n\\n    event PoolAdded(address indexed pool, uint256 weight);\\n    event PoolRemoved(uint256 indexed poolId, address indexed pool);\\n    event WeightAdjusted(uint256 indexed poolId, address indexed pool, uint256 newWeight);\\n    event RewardsPerSecondSet(uint256 rewardsPerSecond);\\n    event RewardsDistributed(address _from, uint256 indexed _amount);\\n\\n    constructor(address _reward, address _rewardSource) {\\n        require(_reward != address(0), \\\"LiquidityMiningManager.constructor: reward token must be set\\\");\\n        require(_rewardSource != address(0), \\\"LiquidityMiningManager.constructor: rewardSource token must be set\\\");\\n        reward = IERC20(_reward);\\n        rewardSource = _rewardSource;\\n    }\\n\\n    function addPool(address _poolContract, uint256 _weight) external onlyGov {\\n        distributeRewards();\\n        require(_poolContract != address(0), \\\"LiquidityMiningManager.addPool: pool contract must be set\\\");\\n        require(!poolAdded[_poolContract], \\\"LiquidityMiningManager.addPool: Pool already added\\\");\\n        require(pools.length < MAX_POOL_COUNT, \\\"LiquidityMiningManager.addPool: Max amount of pools reached\\\");\\n        // add pool\\n        pools.push(Pool({\\n            poolContract: IBasePool(_poolContract),\\n            weight: _weight\\n        }));\\n        poolAdded[_poolContract] = true;\\n        \\n        // increase totalWeight\\n        totalWeight += _weight;\\n\\n        // Approve max token amount\\n        reward.safeApprove(_poolContract, type(uint256).max);\\n\\n        emit PoolAdded(_poolContract, _weight);\\n    }\\n\\n    function removePool(uint256 _poolId) external onlyGov {\\n        require(_poolId < pools.length, \\\"LiquidityMiningManager.removePool: Pool does not exist\\\");\\n        distributeRewards();\\n        address poolAddress = address(pools[_poolId].poolContract);\\n\\n        // decrease totalWeight\\n        totalWeight -= pools[_poolId].weight;\\n        \\n        // remove pool\\n        pools[_poolId] = pools[pools.length - 1];\\n        pools.pop();\\n        poolAdded[poolAddress] = false;\\n\\n        emit PoolRemoved(_poolId, poolAddress);\\n    }\\n\\n    function adjustWeight(uint256 _poolId, uint256 _newWeight) external onlyGov {\\n        require(_poolId < pools.length, \\\"LiquidityMiningManager.adjustWeight: Pool does not exist\\\");\\n        distributeRewards();\\n        Pool storage pool = pools[_poolId];\\n\\n        totalWeight -= pool.weight;\\n        totalWeight += _newWeight;\\n\\n        pool.weight = _newWeight;\\n\\n        emit WeightAdjusted(_poolId, address(pool.poolContract), _newWeight);\\n    }\\n\\n    function setRewardPerSecond(uint256 _rewardPerSecond) external onlyGov {\\n        distributeRewards();\\n        rewardPerSecond = _rewardPerSecond;\\n\\n        emit RewardsPerSecondSet(_rewardPerSecond);\\n    }\\n\\n    function distributeRewards() public onlyRewardDistributor {\\n        uint256 timePassed = block.timestamp - lastDistribution;\\n        uint256 totalRewardAmount = rewardPerSecond * timePassed;\\n        lastDistribution = block.timestamp;\\n\\n        // return if pool length == 0\\n        if(pools.length == 0) {\\n            return;\\n        }\\n\\n        // return if accrued rewards == 0\\n        if(totalRewardAmount == 0) {\\n            return;\\n        }\\n\\n        reward.safeTransferFrom(rewardSource, address(this), totalRewardAmount);\\n\\n        for(uint256 i = 0; i < pools.length; i ++) {\\n            Pool memory pool = pools[i];\\n            uint256 poolRewardAmount = totalRewardAmount * pool.weight / totalWeight;\\n            // Ignore tx failing to prevent a single pool from halting reward distribution\\n            address(pool.poolContract).call(abi.encodeWithSelector(pool.poolContract.distributeRewards.selector, poolRewardAmount));\\n        }\\n\\n        uint256 leftOverReward = reward.balanceOf(address(this));\\n\\n        // send back excess but ignore dust\\n        if(leftOverReward > 1) {\\n            reward.safeTransfer(rewardSource, leftOverReward);\\n        }\\n\\n        emit RewardsDistributed(_msgSender(), totalRewardAmount);\\n    }\\n\\n    function getPools() external view returns(Pool[] memory result) {\\n        return pools;\\n    }\\n}\",\"keccak256\":\"0x8d8e0931320707f253edabd8257c9908bca8a135bf07094b3b944ed4bc0812e1\",\"license\":\"MIT\"},\"contracts/base/TokenSaver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\ncontract TokenSaver is AccessControlEnumerable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant TOKEN_SAVER_ROLE = keccak256(\\\"TOKEN_SAVER_ROLE\\\");\\n\\n    event TokenSaved(address indexed by, address indexed receiver, address indexed token, uint256 amount);\\n\\n    modifier onlyTokenSaver() {\\n        require(hasRole(TOKEN_SAVER_ROLE, _msgSender()), \\\"TokenSaver.onlyTokenSaver: permission denied\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function saveToken(address _token, address _receiver, uint256 _amount) external onlyTokenSaver {\\n        IERC20(_token).safeTransfer(_receiver, _amount);\\n        emit TokenSaved(_msgSender(), _receiver, _token, _amount);\\n    }\\n\\n}\",\"keccak256\":\"0x2404fc7856d000857ec7fbe6be7fcad1fb32daa26dbb6fa8ab2f782ef47539e7\",\"license\":\"MIT\"},\"contracts/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\ninterface IBasePool {\\n    function distributeRewards(uint256 _amount) external;\\n}\\n\\n\",\"keccak256\":\"0x326015d67bcd9fde881c04f0ca39b7ca4fbd1959b748cb9ca9560f2377975be7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600a6002553480156200001657600080fd5b50604051620024ca380380620024ca8339810160408190526200003991620002d0565b620000466000336200014e565b6001600160a01b038216620000b75760405162461bcd60e51b815260206004820152603c6024820152600080516020620024aa83398151915260448201527f6f723a2072657761726420746f6b656e206d757374206265207365740000000060648201526084015b60405180910390fd5b6001600160a01b0381166200012f5760405162461bcd60e51b81526020600482015260426024820152600080516020620024aa83398151915260448201527f6f723a20726577617264536f7572636520746f6b656e206d7573742062652073606482015261195d60f21b608482015260a401620000ae565b6001600160601b0319606092831b8116608052911b1660a05262000308565b6200016582826200019160201b6200132c1760201c565b60008281526001602090815260409091206200018c9183906200133a620001a1821b17901c565b505050565b6200019d8282620001c1565b5050565b6000620001b8836001600160a01b03841662000261565b90505b92915050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200019d576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200021d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054620002aa57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001bb565b506000620001bb565b80516001600160a01b0381168114620002cb57600080fd5b919050565b60008060408385031215620002e457600080fd5b620002ef83620002b3565b9150620002ff60208401620002b3565b90509250929050565b60805160601c60a05160601c61214c6200035e6000396000818161038c01528181610abb0152610ce60152600081816101eb015281816107d901528181610a9901528181610c2a0152610cc4015261214c6000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80639010d07c116100f9578063a717639c11610097578063b9c849b611610071578063b9c849b61461042b578063ca15c8731461043e578063d3b91d8414610451578063d547741f1461047457600080fd5b8063a717639c146103c9578063ac4afa38146103d2578063b536818a1461040457600080fd5b80639afdb2c2116100d35780639afdb2c2146103745780639cfbc00214610387578063a217fddf146103ae578063a38dcbd0146103b657600080fd5b80639010d07c1461032157806391d148541461033457806396c82e571461036b57600080fd5b806336568abe11610166578063673a2a1f11610140578063673a2a1f146102d45780636f4a2cd0146102e957806376175b06146102f15780638f10369a1461031857600080fd5b806336568abe146102a55780635a8c2e26146102b857806366da5815146102c157600080fd5b80632f2ff15d116101975780632f2ff15d1461025657806332a9caba1461026b57806332e4bb0a1461027e57600080fd5b806301ffc9a7146101be578063228cb733146101e6578063248a9ca314610225575b600080fd5b6101d16101cc366004611eae565b610487565b60405190151581526020015b60405180910390f35b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101dd565b610248610233366004611e47565b60009081526020819052604090206001015490565b6040519081526020016101dd565b610269610264366004611e60565b6104b2565b005b610269610279366004611dfb565b6104d9565b6102487fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b44981565b6102696102b3366004611e60565b610849565b61024860025481565b6102696102cf366004611e47565b61086b565b6102dc61093e565b6040516101dd9190611f8e565b6102696109b3565b6102487fd9d917c4034cff8a8c5fa1e40f9fbaf906b827c33ae3ab1fcabbb616cb8ef24d81565b61024860035481565b61020d61032f366004611e8c565b610d4e565b6101d1610342366004611e60565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61024860055481565b610269610382366004611dbf565b610d6d565b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b610248600081565b6102696103c4366004611e47565b610e7f565b61024860045481565b6103e56103e0366004611e47565b61111c565b604080516001600160a01b0390931683526020830191909152016101dd565b6102487f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba81565b610269610439366004611e8c565b611154565b61024861044c366004611e47565b61130b565b6101d161045f366004611da4565b60066020526000908152604090205460ff1681565b610269610482366004611e60565b611322565b60006001600160e01b03198216635a05180f60e01b14806104ac57506104ac8261134f565b92915050565b6104bc8282611384565b60008281526001602052604090206104d4908261133a565b505050565b6105037f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b61056e5760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b60648201526084015b60405180910390fd5b6105766109b3565b6001600160a01b0382166105f25760405162461bcd60e51b815260206004820152603960248201527f4c69717569646974794d696e696e674d616e616765722e616464506f6f6c3a2060448201527f706f6f6c20636f6e7472616374206d75737420626520736574000000000000006064820152608401610565565b6001600160a01b03821660009081526006602052604090205460ff16156106815760405162461bcd60e51b815260206004820152603260248201527f4c69717569646974794d696e696e674d616e616765722e616464506f6f6c3a2060448201527f506f6f6c20616c726561647920616464656400000000000000000000000000006064820152608401610565565b600254600754106106fa5760405162461bcd60e51b815260206004820152603b60248201527f4c69717569646974794d696e696e674d616e616765722e616464506f6f6c3a2060448201527f4d617820616d6f756e74206f6620706f6f6c73207265616368656400000000006064820152608401610565565b6040805180820182526001600160a01b0384811680835260208084018681526007805460018082018355600092835296517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6886002909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6899094019390935590825260069052918220805460ff19169091179055600580548392906107c6908490612019565b9091555061080290506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016836000196113aa565b816001600160a01b03167f0c98febfffcec480c66a977e13f14bafdb5199ea9603591a0715b0cabe0c3ae28260405161083d91815260200190565b60405180910390a25050565b610853828261151d565b60008281526001602052604090206104d490826115a5565b6108957f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b6108fb5760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b6064820152608401610565565b6109036109b3565b60038190556040518181527fa779fa0f0a75020027d18183bb38fa4a9abeea71bb307e00ac7f5410527967ab9060200160405180910390a150565b60606007805480602002602001604051908101604052809291908181526020016000905b828210156109aa576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610962565b50505050905090565b6109dd7fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b44933610342565b610a4f5760405162461bcd60e51b815260206004820152603f60248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79526577617260448201527f644469737472696275746f723a207065726d697373696f6e2064656e696564006064820152608401610565565b600060045442610a5f9190612072565b9050600081600354610a719190612053565b42600455600754909150610a83575050565b80610a8c575050565b610ae16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000030846115ba565b60005b600754811015610c1157600060078281548110610b0357610b03612113565b600091825260208083206040805180820190915260029093020180546001600160a01b0316835260010154908201819052600554919350610b449086612053565b610b4e9190612031565b825160408051602480820185905282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16630b32e9c760e31b17905290519293506001600160a01b0390911691610bb79190611ef1565b6000604051808303816000865af19150503d8060008114610bf4576040519150601f19603f3d011682016040523d82523d6000602084013e610bf9565b606091505b50505050508080610c09906120cc565b915050610ae4565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c7457600080fd5b505afa158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190611ed8565b90506001811115610d0b57610d0b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836115f8565b817fdf29796aad820e4bb192f3a8d631b76519bcd2cbe77cc85af20e9df53cece086336040516001600160a01b03909116815260200160405180910390a2505050565b6000828152600160205260408120610d669083611628565b9392505050565b610d977fd9d917c4034cff8a8c5fa1e40f9fbaf906b827c33ae3ab1fcabbb616cb8ef24d33610342565b610e095760405162461bcd60e51b815260206004820152602c60248201527f546f6b656e53617665722e6f6e6c79546f6b656e53617665723a207065726d6960448201527f7373696f6e2064656e69656400000000000000000000000000000000000000006064820152608401610565565b610e1d6001600160a01b03841683836115f8565b826001600160a01b0316826001600160a01b0316610e383390565b6001600160a01b03167f30d87cec6b4c56cede1018725d1e6d9304e2f7ee6d25b004b7e2183f793f26bc84604051610e7291815260200190565b60405180910390a4505050565b610ea97f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b610f0f5760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b6064820152608401610565565b6007548110610f865760405162461bcd60e51b815260206004820152603660248201527f4c69717569646974794d696e696e674d616e616765722e72656d6f7665506f6f60448201527f6c3a20506f6f6c20646f6573206e6f74206578697374000000000000000000006064820152608401610565565b610f8e6109b3565b600060078281548110610fa357610fa3612113565b6000918252602090912060029091020154600780546001600160a01b0390921692509083908110610fd657610fd6612113565b90600052602060002090600202016001015460056000828254610ff99190612072565b90915550506007805461100e90600190612072565b8154811061101e5761101e612113565b90600052602060002090600202016007838154811061103f5761103f612113565b600091825260209091208254600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911781556001918201549101556007805480611095576110956120fd565b60008281526020808220600260001990940193840201805473ffffffffffffffffffffffffffffffffffffffff19168155600101829055919092556001600160a01b03831680835260069091526040808320805460ff1916905551909184917f18e9d3644c306f9be50ade92ee325ee173812431fa971a0b8d46f9eb707396019190a35050565b6007818154811061112c57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b61117e7f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b6111e45760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b6064820152608401610565565b600754821061125b5760405162461bcd60e51b815260206004820152603860248201527f4c69717569646974794d696e696e674d616e616765722e61646a75737457656960448201527f6768743a20506f6f6c20646f6573206e6f7420657869737400000000000000006064820152608401610565565b6112636109b3565b60006007838154811061127857611278612113565b9060005260206000209060020201905080600101546005600082825461129e9190612072565b9250508190555081600560008282546112b79190612019565b90915550506001810182905580546040518381526001600160a01b039091169084907f4bd857a398c0fb71cc804d86dac2b437d1e5ca0b8a3161ec9638515c5d1997c29060200160405180910390a3505050565b60008181526001602052604081206104ac90611634565b610853828261163e565b6113368282611664565b5050565b6000610d66836001600160a01b038416611702565b60006001600160e01b03198216637965db0b60e01b14806104ac57506301ffc9a760e01b6001600160e01b03198316146104ac565b6000828152602081905260409020600101546113a08133611751565b6104d48383611664565b8015806114335750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156113f957600080fd5b505afa15801561140d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114319190611ed8565b155b6114a55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610565565b6040516001600160a01b0383166024820152604481018290526104d490849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526117cf565b6001600160a01b038116331461159b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610565565b61133682826118b4565b6000610d66836001600160a01b038416611933565b6040516001600160a01b03808516602483015283166044820152606481018290526115f29085906323b872dd60e01b906084016114d1565b50505050565b6040516001600160a01b0383166024820152604481018290526104d490849063a9059cbb60e01b906064016114d1565b6000610d668383611a26565b60006104ac825490565b60008281526020819052604090206001015461165a8133611751565b6104d483836118b4565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16611336576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116be3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054611749575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ac565b5060006104ac565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166113365761178d816001600160a01b03166014611a50565b611798836020611a50565b6040516020016117a9929190611f0d565b60408051601f198184030181529082905262461bcd60e51b825261056591600401611fe6565b6000611824826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bf99092919063ffffffff16565b8051909150156104d457808060200190518101906118429190611e25565b6104d45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610565565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615611336576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611a1c576000611957600183612072565b855490915060009061196b90600190612072565b90508181146119d057600086600001828154811061198b5761198b612113565b90600052602060002001549050808760000184815481106119ae576119ae612113565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806119e1576119e16120fd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104ac565b60009150506104ac565b6000826000018281548110611a3d57611a3d612113565b9060005260206000200154905092915050565b60606000611a5f836002612053565b611a6a906002612019565b67ffffffffffffffff811115611a8257611a82612129565b6040519080825280601f01601f191660200182016040528015611aac576020820181803683370190505b509050600360fc1b81600081518110611ac757611ac7612113565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611af657611af6612113565b60200101906001600160f81b031916908160001a9053506000611b1a846002612053565b611b25906001612019565b90505b6001811115611baa577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611b6657611b66612113565b1a60f81b828281518110611b7c57611b7c612113565b60200101906001600160f81b031916908160001a90535060049490941c93611ba3816120b5565b9050611b28565b508315610d665760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610565565b6060611c088484600085611c10565b949350505050565b606082471015611c885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610565565b843b611cd65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610565565b600080866001600160a01b03168587604051611cf29190611ef1565b60006040518083038185875af1925050503d8060008114611d2f576040519150601f19603f3d011682016040523d82523d6000602084013e611d34565b606091505b5091509150611d44828286611d4f565b979650505050505050565b60608315611d5e575081610d66565b825115611d6e5782518084602001fd5b8160405162461bcd60e51b81526004016105659190611fe6565b80356001600160a01b0381168114611d9f57600080fd5b919050565b600060208284031215611db657600080fd5b610d6682611d88565b600080600060608486031215611dd457600080fd5b611ddd84611d88565b9250611deb60208501611d88565b9150604084013590509250925092565b60008060408385031215611e0e57600080fd5b611e1783611d88565b946020939093013593505050565b600060208284031215611e3757600080fd5b81518015158114610d6657600080fd5b600060208284031215611e5957600080fd5b5035919050565b60008060408385031215611e7357600080fd5b82359150611e8360208401611d88565b90509250929050565b60008060408385031215611e9f57600080fd5b50508035926020909101359150565b600060208284031215611ec057600080fd5b81356001600160e01b031981168114610d6657600080fd5b600060208284031215611eea57600080fd5b5051919050565b60008251611f03818460208701612089565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f45816017850160208801612089565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611f82816028840160208801612089565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b82811015611fd957815180516001600160a01b03168552860151868501529284019290850190600101611fab565b5091979650505050505050565b6020815260008251806020840152612005816040850160208701612089565b601f01601f19169190910160400192915050565b6000821982111561202c5761202c6120e7565b500190565b60008261204e57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561206d5761206d6120e7565b500290565b600082821015612084576120846120e7565b500390565b60005b838110156120a457818101518382015260200161208c565b838111156115f25750506000910152565b6000816120c4576120c46120e7565b506000190190565b60006000198214156120e0576120e06120e7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a4c69717569646974794d696e696e674d616e616765722e636f6e737472756374",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80639010d07c116100f9578063a717639c11610097578063b9c849b611610071578063b9c849b61461042b578063ca15c8731461043e578063d3b91d8414610451578063d547741f1461047457600080fd5b8063a717639c146103c9578063ac4afa38146103d2578063b536818a1461040457600080fd5b80639afdb2c2116100d35780639afdb2c2146103745780639cfbc00214610387578063a217fddf146103ae578063a38dcbd0146103b657600080fd5b80639010d07c1461032157806391d148541461033457806396c82e571461036b57600080fd5b806336568abe11610166578063673a2a1f11610140578063673a2a1f146102d45780636f4a2cd0146102e957806376175b06146102f15780638f10369a1461031857600080fd5b806336568abe146102a55780635a8c2e26146102b857806366da5815146102c157600080fd5b80632f2ff15d116101975780632f2ff15d1461025657806332a9caba1461026b57806332e4bb0a1461027e57600080fd5b806301ffc9a7146101be578063228cb733146101e6578063248a9ca314610225575b600080fd5b6101d16101cc366004611eae565b610487565b60405190151581526020015b60405180910390f35b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101dd565b610248610233366004611e47565b60009081526020819052604090206001015490565b6040519081526020016101dd565b610269610264366004611e60565b6104b2565b005b610269610279366004611dfb565b6104d9565b6102487fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b44981565b6102696102b3366004611e60565b610849565b61024860025481565b6102696102cf366004611e47565b61086b565b6102dc61093e565b6040516101dd9190611f8e565b6102696109b3565b6102487fd9d917c4034cff8a8c5fa1e40f9fbaf906b827c33ae3ab1fcabbb616cb8ef24d81565b61024860035481565b61020d61032f366004611e8c565b610d4e565b6101d1610342366004611e60565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61024860055481565b610269610382366004611dbf565b610d6d565b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b610248600081565b6102696103c4366004611e47565b610e7f565b61024860045481565b6103e56103e0366004611e47565b61111c565b604080516001600160a01b0390931683526020830191909152016101dd565b6102487f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba81565b610269610439366004611e8c565b611154565b61024861044c366004611e47565b61130b565b6101d161045f366004611da4565b60066020526000908152604090205460ff1681565b610269610482366004611e60565b611322565b60006001600160e01b03198216635a05180f60e01b14806104ac57506104ac8261134f565b92915050565b6104bc8282611384565b60008281526001602052604090206104d4908261133a565b505050565b6105037f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b61056e5760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b60648201526084015b60405180910390fd5b6105766109b3565b6001600160a01b0382166105f25760405162461bcd60e51b815260206004820152603960248201527f4c69717569646974794d696e696e674d616e616765722e616464506f6f6c3a2060448201527f706f6f6c20636f6e7472616374206d75737420626520736574000000000000006064820152608401610565565b6001600160a01b03821660009081526006602052604090205460ff16156106815760405162461bcd60e51b815260206004820152603260248201527f4c69717569646974794d696e696e674d616e616765722e616464506f6f6c3a2060448201527f506f6f6c20616c726561647920616464656400000000000000000000000000006064820152608401610565565b600254600754106106fa5760405162461bcd60e51b815260206004820152603b60248201527f4c69717569646974794d696e696e674d616e616765722e616464506f6f6c3a2060448201527f4d617820616d6f756e74206f6620706f6f6c73207265616368656400000000006064820152608401610565565b6040805180820182526001600160a01b0384811680835260208084018681526007805460018082018355600092835296517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6886002909202918201805473ffffffffffffffffffffffffffffffffffffffff1916919097161790955590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6899094019390935590825260069052918220805460ff19169091179055600580548392906107c6908490612019565b9091555061080290506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016836000196113aa565b816001600160a01b03167f0c98febfffcec480c66a977e13f14bafdb5199ea9603591a0715b0cabe0c3ae28260405161083d91815260200190565b60405180910390a25050565b610853828261151d565b60008281526001602052604090206104d490826115a5565b6108957f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b6108fb5760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b6064820152608401610565565b6109036109b3565b60038190556040518181527fa779fa0f0a75020027d18183bb38fa4a9abeea71bb307e00ac7f5410527967ab9060200160405180910390a150565b60606007805480602002602001604051908101604052809291908181526020016000905b828210156109aa576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610962565b50505050905090565b6109dd7fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b44933610342565b610a4f5760405162461bcd60e51b815260206004820152603f60248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79526577617260448201527f644469737472696275746f723a207065726d697373696f6e2064656e696564006064820152608401610565565b600060045442610a5f9190612072565b9050600081600354610a719190612053565b42600455600754909150610a83575050565b80610a8c575050565b610ae16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000030846115ba565b60005b600754811015610c1157600060078281548110610b0357610b03612113565b600091825260208083206040805180820190915260029093020180546001600160a01b0316835260010154908201819052600554919350610b449086612053565b610b4e9190612031565b825160408051602480820185905282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16630b32e9c760e31b17905290519293506001600160a01b0390911691610bb79190611ef1565b6000604051808303816000865af19150503d8060008114610bf4576040519150601f19603f3d011682016040523d82523d6000602084013e610bf9565b606091505b50505050508080610c09906120cc565b915050610ae4565b506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c7457600080fd5b505afa158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac9190611ed8565b90506001811115610d0b57610d0b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836115f8565b817fdf29796aad820e4bb192f3a8d631b76519bcd2cbe77cc85af20e9df53cece086336040516001600160a01b03909116815260200160405180910390a2505050565b6000828152600160205260408120610d669083611628565b9392505050565b610d977fd9d917c4034cff8a8c5fa1e40f9fbaf906b827c33ae3ab1fcabbb616cb8ef24d33610342565b610e095760405162461bcd60e51b815260206004820152602c60248201527f546f6b656e53617665722e6f6e6c79546f6b656e53617665723a207065726d6960448201527f7373696f6e2064656e69656400000000000000000000000000000000000000006064820152608401610565565b610e1d6001600160a01b03841683836115f8565b826001600160a01b0316826001600160a01b0316610e383390565b6001600160a01b03167f30d87cec6b4c56cede1018725d1e6d9304e2f7ee6d25b004b7e2183f793f26bc84604051610e7291815260200190565b60405180910390a4505050565b610ea97f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b610f0f5760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b6064820152608401610565565b6007548110610f865760405162461bcd60e51b815260206004820152603660248201527f4c69717569646974794d696e696e674d616e616765722e72656d6f7665506f6f60448201527f6c3a20506f6f6c20646f6573206e6f74206578697374000000000000000000006064820152608401610565565b610f8e6109b3565b600060078281548110610fa357610fa3612113565b6000918252602090912060029091020154600780546001600160a01b0390921692509083908110610fd657610fd6612113565b90600052602060002090600202016001015460056000828254610ff99190612072565b90915550506007805461100e90600190612072565b8154811061101e5761101e612113565b90600052602060002090600202016007838154811061103f5761103f612113565b600091825260209091208254600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911781556001918201549101556007805480611095576110956120fd565b60008281526020808220600260001990940193840201805473ffffffffffffffffffffffffffffffffffffffff19168155600101829055919092556001600160a01b03831680835260069091526040808320805460ff1916905551909184917f18e9d3644c306f9be50ade92ee325ee173812431fa971a0b8d46f9eb707396019190a35050565b6007818154811061112c57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b61117e7f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba33610342565b6111e45760405162461bcd60e51b815260206004820152603160248201527f4c69717569646974794d696e696e674d616e616765722e6f6e6c79476f763a206044820152701c195c9b5a5cdcda5bdb8819195b9a5959607a1b6064820152608401610565565b600754821061125b5760405162461bcd60e51b815260206004820152603860248201527f4c69717569646974794d696e696e674d616e616765722e61646a75737457656960448201527f6768743a20506f6f6c20646f6573206e6f7420657869737400000000000000006064820152608401610565565b6112636109b3565b60006007838154811061127857611278612113565b9060005260206000209060020201905080600101546005600082825461129e9190612072565b9250508190555081600560008282546112b79190612019565b90915550506001810182905580546040518381526001600160a01b039091169084907f4bd857a398c0fb71cc804d86dac2b437d1e5ca0b8a3161ec9638515c5d1997c29060200160405180910390a3505050565b60008181526001602052604081206104ac90611634565b610853828261163e565b6113368282611664565b5050565b6000610d66836001600160a01b038416611702565b60006001600160e01b03198216637965db0b60e01b14806104ac57506301ffc9a760e01b6001600160e01b03198316146104ac565b6000828152602081905260409020600101546113a08133611751565b6104d48383611664565b8015806114335750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156113f957600080fd5b505afa15801561140d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114319190611ed8565b155b6114a55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610565565b6040516001600160a01b0383166024820152604481018290526104d490849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526117cf565b6001600160a01b038116331461159b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610565565b61133682826118b4565b6000610d66836001600160a01b038416611933565b6040516001600160a01b03808516602483015283166044820152606481018290526115f29085906323b872dd60e01b906084016114d1565b50505050565b6040516001600160a01b0383166024820152604481018290526104d490849063a9059cbb60e01b906064016114d1565b6000610d668383611a26565b60006104ac825490565b60008281526020819052604090206001015461165a8133611751565b6104d483836118b4565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16611336576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116be3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000818152600183016020526040812054611749575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104ac565b5060006104ac565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166113365761178d816001600160a01b03166014611a50565b611798836020611a50565b6040516020016117a9929190611f0d565b60408051601f198184030181529082905262461bcd60e51b825261056591600401611fe6565b6000611824826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bf99092919063ffffffff16565b8051909150156104d457808060200190518101906118429190611e25565b6104d45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610565565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615611336576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015611a1c576000611957600183612072565b855490915060009061196b90600190612072565b90508181146119d057600086600001828154811061198b5761198b612113565b90600052602060002001549050808760000184815481106119ae576119ae612113565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806119e1576119e16120fd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104ac565b60009150506104ac565b6000826000018281548110611a3d57611a3d612113565b9060005260206000200154905092915050565b60606000611a5f836002612053565b611a6a906002612019565b67ffffffffffffffff811115611a8257611a82612129565b6040519080825280601f01601f191660200182016040528015611aac576020820181803683370190505b509050600360fc1b81600081518110611ac757611ac7612113565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611af657611af6612113565b60200101906001600160f81b031916908160001a9053506000611b1a846002612053565b611b25906001612019565b90505b6001811115611baa577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611b6657611b66612113565b1a60f81b828281518110611b7c57611b7c612113565b60200101906001600160f81b031916908160001a90535060049490941c93611ba3816120b5565b9050611b28565b508315610d665760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610565565b6060611c088484600085611c10565b949350505050565b606082471015611c885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610565565b843b611cd65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610565565b600080866001600160a01b03168587604051611cf29190611ef1565b60006040518083038185875af1925050503d8060008114611d2f576040519150601f19603f3d011682016040523d82523d6000602084013e611d34565b606091505b5091509150611d44828286611d4f565b979650505050505050565b60608315611d5e575081610d66565b825115611d6e5782518084602001fd5b8160405162461bcd60e51b81526004016105659190611fe6565b80356001600160a01b0381168114611d9f57600080fd5b919050565b600060208284031215611db657600080fd5b610d6682611d88565b600080600060608486031215611dd457600080fd5b611ddd84611d88565b9250611deb60208501611d88565b9150604084013590509250925092565b60008060408385031215611e0e57600080fd5b611e1783611d88565b946020939093013593505050565b600060208284031215611e3757600080fd5b81518015158114610d6657600080fd5b600060208284031215611e5957600080fd5b5035919050565b60008060408385031215611e7357600080fd5b82359150611e8360208401611d88565b90509250929050565b60008060408385031215611e9f57600080fd5b50508035926020909101359150565b600060208284031215611ec057600080fd5b81356001600160e01b031981168114610d6657600080fd5b600060208284031215611eea57600080fd5b5051919050565b60008251611f03818460208701612089565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f45816017850160208801612089565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611f82816028840160208801612089565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b82811015611fd957815180516001600160a01b03168552860151868501529284019290850190600101611fab565b5091979650505050505050565b6020815260008251806020840152612005816040850160208701612089565b601f01601f19169190910160400192915050565b6000821982111561202c5761202c6120e7565b500190565b60008261204e57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561206d5761206d6120e7565b500290565b600082821015612084576120846120e7565b500390565b60005b838110156120a457818101518382015260200161208c565b838111156115f25750506000910152565b6000816120c4576120c46120e7565b506000190190565b60006000198214156120e0576120e06120e7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000807000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4237_storage)"
      },
      {
        "astId": 4549,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "MAX_POOL_COUNT",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4556,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4558,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "lastDistribution",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4560,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "totalWeight",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4564,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "poolAdded",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4568,
        "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
        "label": "pools",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Pool)4574_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Pool)4574_storage)dyn_storage": {
        "base": "t_struct(Pool)4574_storage",
        "encoding": "dynamic_array",
        "label": "struct LiquidityMiningManager.Pool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBasePool)6553": {
        "encoding": "inplace",
        "label": "contract IBasePool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4237_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4237_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4237_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4236,
            "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3936_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Pool)4574_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityMiningManager.Pool",
        "members": [
          {
            "astId": 4571,
            "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
            "label": "poolContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBasePool)6553"
          },
          {
            "astId": 4573,
            "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
            "label": "weight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3936_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3931,
            "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3935,
            "contract": "contracts/LiquidityMiningManager.sol:LiquidityMiningManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}